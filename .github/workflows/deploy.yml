name: "Deploy"
on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  # Generate a tailscale vpn auth key with oauth2 client
  generate-tailscale-authkey:
    runs-on: ubuntu-latest
    env:
      CLIENT_ID: ${{ secrets.TAILSCALE_OAUTH_CLIENT_ID }}
      CLIENT_SECRET: ${{ secrets.TAILSCALE_OAUTH_CLIENT_SECRET }}
      SCOPES: "authkey.write"
    steps:
      - name: Generate Tailscale Auth Key
        run: |
          sudo apt-get update && sudo apt-get install -y curl jq
          ACCESS_TOKEN=$(curl -s -u "${CLIENT_ID}:${CLIENT_SECRET}" -d "grant_type=client_credentials" -d "scope=${SCOPES}" https://login.tailscale.com/oauth2/token | jq -r '.access_token')
          AUTH_KEY=$(curl -s -X POST -H "Authorization: Bearer ${ACCESS_TOKEN}" https://api.tailscale.com/api/v2/authkeys | jq -r '.[0].key')
          echo "::set-output name=authkey::$AUTH_KEY"
  
  # Authenticate tailscale against private deployment network
  # using previously created auth key
  authenticate-to-private-network:
    runs-on: ubuntu-latest
    needs: generate-tailscale-authkey
    env:
      TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
      TAILSCALE_UPGRADE: "1"
    steps:
      - name: Authenticate to Private Network
        uses: tailscale/setup-tailscale@v1
        with:
          authkey: ${{ env.TAILSCALE_AUTH_KEY }}

  # Now that we are connected to private network
  # we can deploy our infrastructure with terraform
  build-infra-with-terraform:
    name: "Terraform infrastructure"
    needs: authenticate-to-private-network
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      # Checkout repository code
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      # If terraform previously failed abort pipeline
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # Deploy with terraform on pushes to main branch
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_proxmox_api_url: ${{ secrets.PROXMOX_API_URL }}
          TF_VAR_proxmox_api_token_id: ${{ secrets.PROXMOX_API_TOKEN_ID }}
          TF_VAR_proxmox_api_token_secret: ${{ secrets.PROXMOX_API_TOKEN_SECRET }}
          TF_VAR_ciuser: ${{ secrets.CI_USER }}
          TF_VAR_ipconfig0: ${{ secrets.IPCONFIG0 }}
          TF_VAR_ssh_keys: ${{ secrets.SSH_KEY }}
